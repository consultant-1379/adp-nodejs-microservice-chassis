pipeline {
  agent {
    node {
      label 'presentation'
    }
  }
  options {
    ansiColor('xterm')
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
  }
  parameters {
    string(name: 'GERRIT_REFSPEC',
      description: 'Gerrit patchset refspec. It is only used if there is change in the ruleset or the Jenkinsfile. The CI chart\'s stage can also be changed with this.')
    string(name: 'HELM_VERSION',
      description: 'The version of the Helm chart that you want to deploy. If unset the newest version is deployed.' +
      'The available versions are listed here: https://arm.epk.ericsson.se/artifactory/proj-eea-drop-helm/eric-adp-nodejs-chassis-service/')
    booleanParam(name: 'UPLOAD_VHUB', defaultValue: false, description: 'Enable vulnerability hub upload (Only ADP general and re-usable services can do that!!)')
    booleanParam(name: 'UPLOAD_ARM', defaultValue: false, description: 'Enable ARM upload (upload every VA scan tool reports and the VA report markdown as well)')
    booleanParam(name: 'UPLOAD_ERIDOC', defaultValue: false, description: 'Enable ERIDOC upload (upload VA report markdown to the ERIDOC)')
  }
  stages {
    stage('Prepare') {
      steps {
        sh 'bob -r ci/rulesets/va-rules.yaml --dryrun $(bob -r ci/rulesets/va-rules.yaml -lq)'
      }
    }
    stage('Cleanup bob') {
      steps {
        sh 'bob clean'
      }
    }
    stage('Init') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'ARM_API_TOKEN')]) {
          ansiColor('xterm') {
            sh 'bob -r ci/rulesets/va-rules.yaml init'
          }
        }
      }
    }
    stage('Run Image scans and Install') {
      parallel {
        stage('K8S Install') {
          steps {
            lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
              withCredentials([
                usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD'),
                usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'ARM_API_TOKEN'),
                file(credentialsId: env.system, variable: 'KUBECONFIG')
              ]) {
                ansiColor('xterm') {
                  sh 'bob -r ci/rulesets/va-rules.yaml deploy-chart'
                }
              }
            }
          }
        }
        stage('Anchore') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'bob -r ci/rulesets/va-rules.yaml anchore-scan'
              archiveArtifacts '.bob/reports/anchore/**/*.*'
            }
          }
        }
        stage('Trivy') {
          steps {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'bob -r ci/rulesets/va-rules.yaml trivy-scan'
              archiveArtifacts '.bob/reports/trivy/**/*.*'
            }
          }
        }
        stage('Xray') {
          steps {
            withCredentials([usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'ARM_API_TOKEN')]) {
              catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                sh 'bob -r ci/rulesets/va-rules.yaml fetch-xray-report'
                archiveArtifacts '.bob/reports/xray/**/*.*'
                archiveArtifacts '.bob/reports/xray-raw/**/*.*'
              }
            }
          }
        }
      }
    }
    stage('Cleanup images') {
      steps {
        sh 'bob -r ci/rulesets/va-rules.yaml cleanup'
      }
    }
    stage('ZAP scan') {
      steps {
        // TO pull the adp images, whe have to use the arm-adpgs-eceaart-api-token and the eceaart user, but not the eceaart password
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'DONTCARE'),
            string(credentialsId: 'arm-adpgs-eceaart-api-token', variable: 'ARM_API_TOKEN'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
              sh 'bob -r ci/rulesets/va-rules.yaml zap-scan'
              archiveArtifacts '.bob/reports/zap/**/*.*'
            }
          }
        }
      }
    }
    stage('Nmap scan') {
      steps {
        // TO pull the adp images, whe have to use the arm-adpgs-eceaart-api-token and the eceaart user, but not the eceaart password
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([
            usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'DONTCARE'),
            string(credentialsId: 'arm-adpgs-eceaart-api-token', variable: 'ARM_API_TOKEN'),
            file(credentialsId: env.system, variable: 'KUBECONFIG')
          ]) {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh 'bob -r ci/rulesets/va-rules.yaml nmap-scan'
              archiveArtifacts '.bob/reports/nmap/**/*.*'
            }
          }
        }
      }
    }
    stage('Namespace Cleanup') {
      steps {
        lock(resource: null, label: 'presentation-ci', quantity: 1, variable: 'system') {
          withCredentials([file(credentialsId: env.system, variable: 'KUBECONFIG')]) {
            ansiColor('xterm') {
              sh 'bob namespace-cleanup'
            }
          }
        }
      }
    }
    stage('Generate and upload VA report') {
      steps {
        withCredentials([string(credentialsId: 'gas-vulnhub-api-token', variable: 'VHUB_TOKEN')]) {
          catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
            sh 'bob -r ci/rulesets/va-rules.yaml generate-upload-VA-report'
            archiveArtifacts '.bob/reports/va-report.md'
          }
        }
      }
    }
    stage('Upload reports to ARM') {
      when { expression { env.UPLOAD_ARM == 'true' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'arm-functional-user', usernameVariable: 'ARM_API_USER', passwordVariable: 'ARM_API_TOKEN')]) {
          sh 'bob -r ci/rulesets/va-rules.yaml upload-reports-to-arm'
        }
      }
    }
    stage('Upload VA report to Eridoc') {
      when { expression { env.UPLOAD_ERIDOC == 'true' } }
      steps {
        withCredentials([usernamePassword(credentialsId: 'eridoc-username-password', usernameVariable: 'ERIDOC_USERNAME', passwordVariable: 'ERIDOC_PASSWORD')]) {
          sh 'bob -r ci/rulesets/va-rules.yaml upload-va-report-to-eridoc'
        }
      }
    }
  }
  post {
    always {
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports/zap',
        reportFiles: 'backend_api.html',
        reportName: 'WS ZAP Scanning Report'
      ])
      publishHTML(target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: '.bob/reports/zap',
        reportFiles: 'ui_api.html',
        reportName: 'UI ZAP Scanning Report'
      ])
    }
  }
}
